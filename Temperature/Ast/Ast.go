package Ast

import (
	"bytes"
	"strings"
)

/*
|=============================================================
|	StatementNode()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *ExpressionStatement) StatementNode() {

}

/*
|=============================================================
|	TokenLiteral()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *ExpressionStatement) TokenLiteral() string {
	return this.Token.Literal
}

/*
|=============================================================
|	String()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *ExpressionStatement) String() string {
	if this.Expression != nil {
		return this.Expression.String()
	}
	return ""
}

/*
|=============================================================
|	ExpressionNode()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *Identifier) ExpressionNode() {

}

/*
|=============================================================
|	TokenLiteral()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *Identifier) TokenLiteral() string {
	return this.Token.Literal
}

/*
|=============================================================
|	String()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *Identifier) String() string {
	return this.Value
}

/*
|=============================================================
|	ExpressionNode()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *Boolean) ExpressionNode() {

}

/*
|=============================================================
|	TokenLiteral()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *Boolean) TokenLiteral() string {
	return this.Token.Literal
}

/*
|=============================================================
|	String()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *Boolean) String() string {
	return this.Token.Literal
}

/*
|=============================================================
|	GetValue()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *Boolean) GetValue() interface{} {
	return this.Value
}

/*
|=============================================================
|	ExpressionNode()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *IntegerLiteral) ExpressionNode() {

}

/*
|=============================================================
|	TokenLiteral()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *IntegerLiteral) TokenLiteral() string {
	return this.Token.Literal
}

/*
|=============================================================
|	String()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *IntegerLiteral) String() string {
	return this.Token.Literal
}

/*
|=============================================================
|	GetValue()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *IntegerLiteral) GetValue() interface{} {
	return this.Value
}

/*
|=============================================================
|	ExpressionNode()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *FloatLiteral) ExpressionNode() {

}

/*
|=============================================================
|	TokenLiteral()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *FloatLiteral) TokenLiteral() string {
	return this.Token.Literal
}

/*
|=============================================================
|	String()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *FloatLiteral) String() string {
	return this.Token.Literal
}

/*
|=============================================================
|	GetValue()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *FloatLiteral) GetValue() interface{} {
	return this.Value
}

/*
|=============================================================
|	ExpressionNode()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *NullLiteral) ExpressionNode() {

}

/*
|=============================================================
|	TokenLiteral()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *NullLiteral) TokenLiteral() string {
	return this.Token.Literal
}

/*
|=============================================================
|	String()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *NullLiteral) String() string {
	return this.Token.Literal
}

/*
|=============================================================
|	GetValue()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *NullLiteral) GetValue() interface{} {
	return this.Value
}

/*
|=============================================================
|	ExpressionNode()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *StringLiteral) ExpressionNode() {

}

/*
|=============================================================
|	TokenLiteral()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *StringLiteral) TokenLiteral() string {
	return this.Token.Literal
}

/*
|=============================================================
|	String()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *StringLiteral) String() string {
	return this.Token.Literal
}

/*
|=============================================================
|	GetValue()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *StringLiteral) GetValue() interface{} {
	return this.Value
}

/*
|=============================================================
|	ExpressionNode()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *ArrayLiteral) ExpressionNode() {

}

/*
|=============================================================
|	TokenLiteral()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *ArrayLiteral) TokenLiteral() string {
	return this.Token.Literal
}

/*
|=============================================================
|	String()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *ArrayLiteral) String() string {
	X := []string{}

	for _, KV := range this.Elems {
		X = append(X, KV.String())
	}

	return "ETA: " + "{" + strings.Join(X, ",") + "}"
}

/*
|=============================================================
|	ExpressionNode()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *ObjectLiteral) ExpressionNode() {

}

/*
|=============================================================
|	TokenLiteral()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *ObjectLiteral) TokenLiteral() string {
	return this.Token.Literal
}

/*
|=============================================================
|	String()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *ObjectLiteral) String() string {
	X := []string{}

	for Key, Value := range this.Elems {
		X = append(X, Key+":"+Value.String())
	}

	return "ETA: " + "{" + strings.Join(X, ",") + "}"
}

/*
|=============================================================
|	ExpressionNode()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *PrefixExpression) ExpressionNode() {

}

/*
|=============================================================
|	TokenLiteral()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *PrefixExpression) TokenLiteral() string {
	return this.Token.Literal
}

/*
|=============================================================
|	String()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *PrefixExpression) String() string {
	var Out bytes.Buffer

	Out.WriteString("(")
	Out.WriteString(this.Operator)
	Out.WriteString(this.Right.String())
	Out.WriteString(")")

	return Out.String()
}

/*
|=============================================================
|	ExpressionNode()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *InfixExpression) ExpressionNode() {

}

/*
|=============================================================
|	TokenLiteral()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *InfixExpression) TokenLiteral() string {
	return this.Token.Literal
}

/*
|=============================================================
|	String()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *InfixExpression) String() string {
	var Out bytes.Buffer

	Out.WriteString("(")
	Out.WriteString(this.Left.String())
	Out.WriteString(" " + this.Operator + " ")
	Out.WriteString(this.Right.String())
	Out.WriteString(")")

	return Out.String()
}

/*
|=============================================================
|	ExpressionNode()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *CallExpression) ExpressionNode() {

}

/*
|=============================================================
|	TokenLiteral()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *CallExpression) TokenLiteral() string {
	return this.Token.Literal
}

/*
|=============================================================
|	String()
|=============================================================
|
|
|
|
|=============================================================
*/
func (this *CallExpression) String() string {
	var Out bytes.Buffer

	args := []string{}

	for _, a := range this.Arguments {
		args = append(args, a.String())
	}

	Out.WriteString(this.Function.String())
	Out.WriteString("(")
	Out.WriteString(strings.Join(args, ","))
	Out.WriteString(")")

	return Out.String()
}
